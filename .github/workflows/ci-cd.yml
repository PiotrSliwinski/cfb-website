name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - staging
          - production
          - both
        default: staging
      skip_tests:
        description: 'Skip tests (not recommended for production)'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment even if build fails'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
  SERVICE_NAME: cfb-website
  REGION: europe-west1

jobs:
  # Job 1: Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Type check
        run: npx tsc --noEmit
        continue-on-error: true

  # Job 2: Determine Environment
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      is-staging: ${{ steps.set-env.outputs.is-staging }}
      is-production: ${{ steps.set-env.outputs.is-production }}

    steps:
      - name: Determine environment from branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "is-staging=false" >> $GITHUB_OUTPUT
            echo "is-production=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "is-staging=true" >> $GITHUB_OUTPUT
            echo "is-production=false" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "is-staging=false" >> $GITHUB_OUTPUT
            echo "is-production=false" >> $GITHUB_OUTPUT
          fi

  # Job 3: Build (Staging)
  build-staging:
    name: Build Application (Staging)
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.is-staging == 'true'
    environment: Staging  # Use GitHub Environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for build
        run: |
          # Support both vars and secrets (vars preferred for non-sensitive data like URLs)
          SUPABASE_URL="${{ vars.SUPABASE_URL }}${{ secrets.SUPABASE_URL }}"
          echo "SUPABASE_URL=$SUPABASE_URL" >> .env.production
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.production
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.production
          echo "GOOGLE_PLACES_API_KEY=${{ secrets.GOOGLE_PLACES_API_KEY }}" >> .env.production
          echo "GOOGLE_PLACE_ID=${{ secrets.GOOGLE_PLACE_ID }}" >> .env.production

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-staging
          path: |
            .next/
            public/
          retention-days: 1

  # Job 4: Build (Production)
  build-production:
    name: Build Application (Production)
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.is-production == 'true'
    environment: Production  # Use GitHub Environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for build
        run: |
          # Support both vars and secrets (vars preferred for non-sensitive data like URLs)
          SUPABASE_URL="${{ vars.SUPABASE_URL }}${{ secrets.SUPABASE_URL }}"
          echo "SUPABASE_URL=$SUPABASE_URL" >> .env.production
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.production
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.production
          echo "GOOGLE_PLACES_API_KEY=${{ secrets.GOOGLE_PLACES_API_KEY }}" >> .env.production
          echo "GOOGLE_PLACE_ID=${{ secrets.GOOGLE_PLACE_ID }}" >> .env.production

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-production
          path: |
            .next/
            public/
          retention-days: 1

  # Job 5: Route Tests
  test-routes:
    name: Route Tests
    runs-on: ubuntu-latest
    needs: [determine-environment, build-staging, build-production]
    if: |
      always() &&
      !cancelled() &&
      (github.event.inputs.skip_tests != 'true' || github.event_name != 'workflow_dispatch') &&
      (needs.build-staging.result == 'success' || needs.build-production.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local instance
        run: supabase start

      - name: Set Supabase environment variables
        run: |
          # Supabase local uses well-documented default JWT keys (safe for testing)
          # Server-only variables (no NEXT_PUBLIC prefix for security)
          echo "SUPABASE_URL=http://127.0.0.1:54321" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU" >> $GITHUB_ENV
          # Set mock Google API credentials for testing (API will return empty data gracefully)
          echo "GOOGLE_PLACES_API_KEY=test_api_key_for_ci" >> $GITHUB_ENV
          echo "GOOGLE_PLACE_ID=test_place_id_for_ci" >> $GITHUB_ENV

      - name: Verify Supabase is running
        run: |
          echo "Waiting for Supabase to be ready..."
          npx wait-on http://127.0.0.1:54321/rest/v1/ -t 30000
          echo "âœ… Supabase is ready"
          echo "URL: http://127.0.0.1:54321"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.determine-environment.outputs.is-staging == 'true' && 'build-artifacts-staging' || 'build-artifacts-production' }}

      - name: Start application
        run: |
          PORT=3000 npm run dev &
          echo $! > server.pid
          # Wait for server to be ready
          npx wait-on http://localhost:3000 -t 120000
        env:
          PORT: 3000

      - name: Run route tests
        run: TEST_BASE_URL=http://localhost:3000 npm run test:routes

      - name: Stop application
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Stop Supabase
        if: always()
        run: supabase stop --no-backup

  # Job 6: Build and Push Docker Image (Staging)
  docker-build-staging:
    name: Build & Push Docker Image (Staging)
    runs-on: ubuntu-latest
    needs: [determine-environment, build-staging, test-routes]
    environment: Staging  # Use GitHub Environment
    if: |
      always() &&
      !cancelled() &&
      needs.determine-environment.outputs.is-staging == 'true' &&
      (needs.build-staging.result == 'success') &&
      (needs['test-routes'].result == 'success' || needs['test-routes'].result == 'skipped') &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/develop')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          # Support both vars and secrets for SUPABASE_URL
          SUPABASE_URL="${{ vars.SUPABASE_URL }}${{ secrets.SUPABASE_URL }}"
          docker build \
            --build-arg SUPABASE_URL="$SUPABASE_URL" \
            --build-arg SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
            --build-arg SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} \
            --build-arg GOOGLE_PLACES_API_KEY=${{ secrets.GOOGLE_PLACES_API_KEY }} \
            --build-arg GOOGLE_PLACE_ID=${{ secrets.GOOGLE_PLACE_ID }} \
            -t ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:staging-${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:staging-latest \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:staging-latest

  # Job 7: Apply Database Migrations (Staging)
  migrate-staging:
    name: Apply Migrations (Staging)
    runs-on: ubuntu-latest
    needs: [determine-environment, docker-build-staging]
    environment: Staging
    if: |
      always() &&
      !cancelled() &&
      needs.determine-environment.outputs.is-staging == 'true' &&
      (needs['docker-build-staging'].result == 'success') &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/develop')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          # Extract project reference from SUPABASE_URL
          # Try vars first, fallback to secrets
          SUPABASE_URL="${{ vars.SUPABASE_URL }}"
          if [ -z "$SUPABASE_URL" ]; then
            SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          fi

          PROJECT_REF=$(echo "$SUPABASE_URL" | sed -n 's/.*https:\/\/\([^.]*\).*/\1/p')
          echo "Linking to project: $PROJECT_REF"

          # Create connection string for linking
          # Note: We need the database password from secrets
          supabase link --project-ref "$PROJECT_REF" --password "${{ secrets.SUPABASE_DB_PASSWORD }}"

      - name: Apply migrations
        run: |
          echo "Applying migrations to staging database..."
          supabase db push --linked

      - name: Verify migrations
        run: |
          echo "Checking migration status..."
          supabase migration list --linked

  # Job 8: Build and Push Docker Image (Production)
  docker-build-production:
    name: Build & Push Docker Image (Production)
    runs-on: ubuntu-latest
    needs: [determine-environment, build-production, test-routes]
    environment: Production  # Use GitHub Environment
    if: |
      always() &&
      !cancelled() &&
      needs.determine-environment.outputs.is-production == 'true' &&
      (needs.build-production.result == 'success') &&
      (needs['test-routes'].result == 'success' || needs['test-routes'].result == 'skipped') &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          # Support both vars and secrets for SUPABASE_URL
          SUPABASE_URL="${{ vars.SUPABASE_URL }}${{ secrets.SUPABASE_URL }}"
          docker build \
            --build-arg SUPABASE_URL="$SUPABASE_URL" \
            --build-arg SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
            --build-arg SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} \
            --build-arg GOOGLE_PLACES_API_KEY=${{ secrets.GOOGLE_PLACES_API_KEY }} \
            --build-arg GOOGLE_PLACE_ID=${{ secrets.GOOGLE_PLACE_ID }} \
            -t ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

  # Job 9: Apply Database Migrations (Production)
  migrate-production:
    name: Apply Migrations (Production)
    runs-on: ubuntu-latest
    needs: [determine-environment, docker-build-production]
    environment: Production
    if: |
      always() &&
      !cancelled() &&
      needs.determine-environment.outputs.is-production == 'true' &&
      (needs['docker-build-production'].result == 'success') &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          # Extract project reference from SUPABASE_URL
          # Try vars first, fallback to secrets
          SUPABASE_URL="${{ vars.SUPABASE_URL }}"
          if [ -z "$SUPABASE_URL" ]; then
            SUPABASE_URL="${{ secrets.SUPABASE_URL }}"
          fi

          PROJECT_REF=$(echo "$SUPABASE_URL" | sed -n 's/.*https:\/\/\([^.]*\).*/\1/p')
          echo "Linking to project: $PROJECT_REF"

          # Create connection string for linking
          supabase link --project-ref "$PROJECT_REF" --password "${{ secrets.SUPABASE_DB_PASSWORD }}"

      - name: Apply migrations
        run: |
          echo "Applying migrations to production database..."
          supabase db push --linked

      - name: Verify migrations
        run: |
          echo "Checking migration status..."
          supabase migration list --linked

  # Job 10: Deploy to Cloud Run (Staging)
  deploy-staging:
    name: Deploy to Cloud Run (Staging)
    runs-on: ubuntu-latest
    needs: [determine-environment, migrate-staging]
    if: |
      always() &&
      !cancelled() &&
      needs.determine-environment.outputs.is-staging == 'true' &&
      (needs['migrate-staging'].result == 'success') &&
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'both')) ||
        (github.event_name == 'push' && github.ref == 'refs/heads/develop')
      )
    environment:
      name: staging
      url: https://cfb-website-staging-clinica-ferreira-borges.run.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
            --image=${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:staging-${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --set-secrets="SUPABASE_URL=supabase-url-staging:latest,SUPABASE_ANON_KEY=supabase-anon-key-staging:latest,SUPABASE_SERVICE_ROLE_KEY=supabase-service-role-key-staging:latest,GOOGLE_PLACES_API_KEY=google-places-api-key-staging:latest,GOOGLE_PLACE_ID=google-place-id-staging:latest" \
            --memory=512Mi \
            --cpu=1 \
            --timeout=300 \
            --max-instances=10 \
            --min-instances=0 \
            --port=3000

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region=${{ env.REGION }} --format='value(status.url)')
          echo "Staging deployed to: $SERVICE_URL"
          echo "STAGING_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Run smoke tests against staging
        run: |
          sleep 10
          curl -f ${{ env.STAGING_URL }} || exit 1
          curl -f ${{ env.STAGING_URL }}/api/settings || exit 1

  # Job 11: Deploy to Cloud Run (Production)
  deploy-production:
    name: Deploy to Cloud Run (Production)
    runs-on: ubuntu-latest
    needs: [determine-environment, migrate-production]
    if: |
      always() &&
      !cancelled() &&
      needs.determine-environment.outputs.is-production == 'true' &&
      (needs['migrate-production'].result == 'success') &&
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both')) ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )
    environment:
      name: production
      url: https://clinicaferreiraborges.pt

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGISTRY }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --set-secrets="SUPABASE_URL=supabase-url-production:latest,SUPABASE_ANON_KEY=supabase-anon-key-production:latest,SUPABASE_SERVICE_ROLE_KEY=supabase-service-role-key-production:latest,GOOGLE_PLACES_API_KEY=google-places-api-key-production:latest,GOOGLE_PLACE_ID=google-place-id-production:latest" \
            --memory=1Gi \
            --cpu=2 \
            --timeout=300 \
            --max-instances=100 \
            --min-instances=1 \
            --port=3000

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "Production deployed to: $SERVICE_URL"
          echo "PRODUCTION_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Run smoke tests against production
        run: |
          sleep 10
          curl -f ${{ env.PRODUCTION_URL }} || exit 1
          curl -f ${{ env.PRODUCTION_URL }}/api/settings || exit 1

      - name: Create deployment tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          TAG_NAME="deploy-$(date +%Y%m%d-%H%M%S)"
          git tag -a $TAG_NAME -m "Production deployment $TAG_NAME"
          git push origin $TAG_NAME || true
