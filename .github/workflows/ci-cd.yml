name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - staging
          - production
          - both
        default: staging
      skip_tests:
        description: 'Skip tests (not recommended for production)'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment even if build fails'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: cfb-website
  REGION: europe-west1

jobs:
  # Job 1: Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Type check
        run: npx tsc --noEmit
        continue-on-error: true

  # Job 2: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for build
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.production
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.production
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.production

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 1

  # Job 3: Route Tests
  test-routes:
    name: Route Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.skip_tests != 'true' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local instance
        run: |
          supabase start
          # Export local Supabase credentials
          # Variable names in supabase status -o env are: ANON_KEY, SERVICE_ROLE_KEY (not SUPABASE_* prefixed)
          echo "NEXT_PUBLIC_SUPABASE_URL=http://127.0.0.1:54321" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=$(supabase status -o env | grep '^ANON_KEY=' | cut -d'=' -f2- | tr -d '"')" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_ROLE_KEY=$(supabase status -o env | grep '^SERVICE_ROLE_KEY=' | cut -d'=' -f2- | tr -d '"')" >> $GITHUB_ENV

      - name: Verify Supabase credentials
        run: |
          echo "Supabase URL: $NEXT_PUBLIC_SUPABASE_URL"
          echo "Anon key length: ${#NEXT_PUBLIC_SUPABASE_ANON_KEY}"
          echo "Service role key length: ${#SUPABASE_SERVICE_ROLE_KEY}"
          echo "Anon key (first 50 chars): ${NEXT_PUBLIC_SUPABASE_ANON_KEY:0:50}..."
          echo "Service role key (first 50 chars): ${SUPABASE_SERVICE_ROLE_KEY:0:50}..."
          # Validate key lengths (JWT tokens should be ~250+ chars)
          if [ ${#NEXT_PUBLIC_SUPABASE_ANON_KEY} -lt 200 ]; then
            echo "ERROR: Anon key too short (${#NEXT_PUBLIC_SUPABASE_ANON_KEY} chars)"
            exit 1
          fi
          if [ ${#SUPABASE_SERVICE_ROLE_KEY} -lt 200 ]; then
            echo "ERROR: Service role key too short (${#SUPABASE_SERVICE_ROLE_KEY} chars)"
            exit 1
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Start application
        run: |
          PORT=3000 npm run dev &
          echo $! > server.pid
          # Wait for server to be ready
          npx wait-on http://localhost:3000 -t 120000
        env:
          PORT: 3000

      - name: Run route tests
        run: TEST_BASE_URL=http://localhost:3000 npm run test:routes

      - name: Stop application
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Stop Supabase
        if: always()
        run: supabase stop --no-backup

  # Job 4: Build and Push Docker Image
  docker-build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, test-routes]
    if: |
      always() &&
      !cancelled() &&
      (needs.build.result == 'success') &&
      (needs['test-routes'].result == 'success' || needs['test-routes'].result == 'skipped') &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'))
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }} \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }} \
            --build-arg SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.BRANCH_NAME }} \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.BRANCH_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

  # Job 5: Deploy to Cloud Run (Staging)
  deploy-staging:
    name: Deploy to Cloud Run (Staging)
    runs-on: ubuntu-latest
    needs: docker-build
    if: |
      always() &&
      !cancelled() &&
      (needs.docker-build.result == 'success') &&
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'both')) ||
        (github.event_name == 'push' && github.ref == 'refs/heads/develop')
      )
    environment:
      name: staging
      url: https://cfb-website-staging.run.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }}-staging \
            --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:develop \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --set-secrets="NEXT_PUBLIC_SUPABASE_URL=NEXT_PUBLIC_SUPABASE_URL:latest,NEXT_PUBLIC_SUPABASE_ANON_KEY=NEXT_PUBLIC_SUPABASE_ANON_KEY:latest,SUPABASE_SERVICE_ROLE_KEY=SUPABASE_SERVICE_ROLE_KEY:latest" \
            --memory=512Mi \
            --cpu=1 \
            --timeout=300 \
            --max-instances=10 \
            --min-instances=0 \
            --port=3000

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }}-staging --region=${{ env.REGION }} --format='value(status.url)')
          echo "Staging deployed to: $SERVICE_URL"
          echo "STAGING_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Run smoke tests against staging
        run: |
          sleep 10
          curl -f ${{ env.STAGING_URL }} || exit 1
          curl -f ${{ env.STAGING_URL }}/api/settings || exit 1

  # Job 6: Deploy to Cloud Run (Production)
  deploy-production:
    name: Deploy to Cloud Run (Production)
    runs-on: ubuntu-latest
    needs: docker-build
    if: |
      always() &&
      !cancelled() &&
      (needs.docker-build.result == 'success') &&
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both')) ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )
    environment:
      name: production
      url: https://clinicaferreiraborges.pt

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --set-secrets="NEXT_PUBLIC_SUPABASE_URL=NEXT_PUBLIC_SUPABASE_URL:latest,NEXT_PUBLIC_SUPABASE_ANON_KEY=NEXT_PUBLIC_SUPABASE_ANON_KEY:latest,SUPABASE_SERVICE_ROLE_KEY=SUPABASE_SERVICE_ROLE_KEY:latest" \
            --memory=1Gi \
            --cpu=2 \
            --timeout=300 \
            --max-instances=100 \
            --min-instances=1 \
            --port=3000

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "Production deployed to: $SERVICE_URL"
          echo "PRODUCTION_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Run smoke tests against production
        run: |
          sleep 10
          curl -f ${{ env.PRODUCTION_URL }} || exit 1
          curl -f ${{ env.PRODUCTION_URL }}/api/settings || exit 1

      - name: Create deployment tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          TAG_NAME="deploy-$(date +%Y%m%d-%H%M%S)"
          git tag -a $TAG_NAME -m "Production deployment $TAG_NAME"
          git push origin $TAG_NAME || true
