# =============================================================================
# Environment Variables Template - Multi-Environment Setup
# =============================================================================
# This project uses GitHub Environments for clean multi-environment setup:
# - Local Development: .env.local (this file, gitignored)
# - Staging: GitHub Environment "Staging" + GCP Secret Manager (*-staging)
# - Production: GitHub Environment "Production" + GCP Secret Manager (*-production)
# =============================================================================

# -----------------------------------------------------------------------------
# For LOCAL DEVELOPMENT
# -----------------------------------------------------------------------------
# 1. Copy this file to .env.local:
#    cp .env.example .env.local
#
# 2. Start local Supabase:
#    npx supabase start
#
# 3. The command outputs your local credentials - copy them to .env.local
#
# 4. Start development server:
#    npm run dev
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Supabase Configuration (Server-Only - NEVER use NEXT_PUBLIC_ prefix)
# -----------------------------------------------------------------------------

# For LOCAL development: Use default Supabase local values
# After running "npx supabase start", you'll see these values in the output
SUPABASE_URL=http://127.0.0.1:54321
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU

# For STAGING: Don't set these locally! Use GitHub Environment "Staging":
#   Go to: Settings ‚Üí Environments ‚Üí Staging ‚Üí Add secret
#   Secret names (same as local, no prefix):
#     SUPABASE_URL
#     SUPABASE_ANON_KEY
#     SUPABASE_SERVICE_ROLE_KEY
#   Get values from: https://app.supabase.com/project/your-staging-project/settings/api

# For PRODUCTION: Don't set these locally! Use GitHub Environment "Production":
#   Go to: Settings ‚Üí Environments ‚Üí Production ‚Üí Add secret
#   Secret names (same as local, no prefix):
#     SUPABASE_URL
#     SUPABASE_ANON_KEY
#     SUPABASE_SERVICE_ROLE_KEY
#   Get values from: https://app.supabase.com/project/your-production-project/settings/api

# -----------------------------------------------------------------------------
# Google Places API (Server-Only, Optional)
# -----------------------------------------------------------------------------
# To enable Google Reviews feature:
# 1. Create API key: https://console.cloud.google.com/apis/credentials
# 2. Enable: Places API (New)
# 3. Find your Place ID: https://developers.google.com/maps/documentation/places/web-service/place-id
#
# Leave empty to disable Google Reviews (app works without it)
# -----------------------------------------------------------------------------

GOOGLE_PLACES_API_KEY=your_google_places_api_key_here
GOOGLE_PLACE_ID=your_google_place_id_here

# For STAGING: Add to GitHub Environment "Staging":
#   GOOGLE_PLACES_API_KEY
#   GOOGLE_PLACE_ID

# For PRODUCTION: Add to GitHub Environment "Production":
#   GOOGLE_PLACES_API_KEY
#   GOOGLE_PLACE_ID

# -----------------------------------------------------------------------------
# OpenAI API (Server-Only, Optional)
# -----------------------------------------------------------------------------
# To enable AI-powered content generation in the admin panel:
# 1. Create API key: https://platform.openai.com/api-keys
# 2. Set billing limits to control costs
# 3. Used for:
#    - AI text generation (GPT-4o-mini) for treatment descriptions, team bios, etc.
#    - AI image generation (DALL-E 3) for treatment icons, hero images, team photos
#
# Leave empty to disable AI features (admin panel works without it)
# Note: AI features incur OpenAI API costs - monitor usage in OpenAI dashboard
# -----------------------------------------------------------------------------

OPENAI_API_KEY=your_openai_api_key_here

# For STAGING: Add to GitHub Environment "Staging":
#   OPENAI_API_KEY

# For PRODUCTION: Add to GitHub Environment "Production":
#   OPENAI_API_KEY

# -----------------------------------------------------------------------------
# Environment-Specific Configuration Guide
# -----------------------------------------------------------------------------

# LOCAL DEVELOPMENT (.env.local)
# ==============================
# File: .env.local (gitignored, never committed)
# Supabase: Local instance (npx supabase start)
# Purpose: Feature development and testing
# Commands:
#   npx supabase start     # Start local Supabase
#   npm run dev            # Start Next.js dev server
#   npm run test:routes    # Test routes locally

# STAGING (GitHub Environment + GCP)
# ===================================
# Branch: develop
# Deployment: Automatic on push to develop
# Cloud Run: cfb-website-staging
# Supabase: Staging project (create at supabase.com)
#
# GitHub Environment: "Staging"
#   Location: Settings ‚Üí Environments ‚Üí Staging
#   Secrets (same names as local, no prefix):
#     SUPABASE_URL
#     SUPABASE_ANON_KEY
#     SUPABASE_SERVICE_ROLE_KEY
#     GOOGLE_PLACES_API_KEY (optional)
#     GOOGLE_PLACE_ID (optional)
#
# GCP Secrets (with -staging suffix):
#   supabase-url-staging
#   supabase-anon-key-staging
#   supabase-service-role-key-staging
#   google-places-api-key-staging (optional)
#   google-place-id-staging (optional)
#
# Commands:
#   git push origin develop  # Deploy to staging

# PRODUCTION (GitHub Environment + GCP)
# ======================================
# Branch: main
# Deployment: Automatic on push to main (requires approval)
# Cloud Run: cfb-website
# Supabase: Production project (create at supabase.com)
#
# GitHub Environment: "Production"
#   Location: Settings ‚Üí Environments ‚Üí Production
#   Secrets (same names as local, no prefix):
#     SUPABASE_URL
#     SUPABASE_ANON_KEY
#     SUPABASE_SERVICE_ROLE_KEY
#     GOOGLE_PLACES_API_KEY (optional)
#     GOOGLE_PLACE_ID (optional)
#
# GCP Secrets (with -production suffix):
#   supabase-url-production
#   supabase-anon-key-production
#   supabase-service-role-key-production
#   google-places-api-key-production (optional)
#   google-place-id-production (optional)
#
# Commands:
#   git push origin main  # Deploy to production

# -----------------------------------------------------------------------------
# Setup Documentation
# -----------------------------------------------------------------------------
# üìñ Complete guides available in docs/:
#
# 1. GitHub Environments Setup (NEW - Recommended):
#    docs/GITHUB-ENVIRONMENTS-SETUP.md
#
# 2. Environment Variables Guide:
#    docs/ENVIRONMENT-VARIABLES-GUIDE.md
#
# 3. Supabase Setup & Migrations:
#    docs/SUPABASE-MULTI-ENVIRONMENT-SETUP.md
#
# 4. Multi-Environment Overview:
#    docs/MULTI-ENVIRONMENT-SETUP-SUMMARY.md
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Security Notes
# -----------------------------------------------------------------------------
# ‚ö†Ô∏è NEVER commit these files:
#   .env
#   .env.local
#   .env.production
#
# ‚úÖ ALWAYS use:
#   - .env.local for local development (gitignored)
#   - GitHub Environments for CI/CD builds
#   - GCP Secret Manager for Cloud Run runtime
#
# ‚ùå NEVER use NEXT_PUBLIC_ prefix for sensitive data
#   - Only use for truly public configuration
#   - Supabase keys should be server-only
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Secret Naming Convention Reference
# -----------------------------------------------------------------------------
# This project uses consistent naming across all environments.
# NO environment suffixes (-staging, -production) are used in secret names.
#
# GitHub Environments (Settings ‚Üí Environments ‚Üí [Staging/Production]):
#   Secret names are exactly as shown in this file (no suffix):
#     SUPABASE_URL
#     SUPABASE_ANON_KEY
#     SUPABASE_SERVICE_ROLE_KEY
#     GOOGLE_PLACES_API_KEY
#     GOOGLE_PLACE_ID
#     OPENAI_API_KEY
#     SUPABASE_ACCESS_TOKEN (repository-level only)
#     SUPABASE_DB_PASSWORD
#     GOOGLE_PROJECT_ID (repository-level only)
#     GOOGLE_SERVICE_ACCOUNT_KEY (repository-level only)
#
# The CI/CD pipeline automatically reads from the appropriate GitHub Environment
# based on the branch (develop = Staging, main = Production).
#
# Note: If you're using GCP Secret Manager directly (not required with GitHub
# Environments), the naming convention would be similar but you'd need to map
# them in your Cloud Run service configuration.
# -----------------------------------------------------------------------------
